// Code generated by goctl. DO NOT EDIT!
// Source: product.proto

package productclient

import (
	"context"

	"github.com/smartgreeting/store-rpc/product/product"

	"github.com/tal-tech/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Banner            = product.Banner
	BannerReply       = product.BannerReply
	GetBannerReq      = product.GetBannerReq
	GetProductListReq = product.GetProductListReq
	GetProductReq     = product.GetProductReq
	ProductListReply  = product.ProductListReply
	ProductReply      = product.ProductReply

	Product interface {
		//  获取轮播图
		GetBanner(ctx context.Context, in *GetBannerReq, opts ...grpc.CallOption) (*BannerReply, error)
		// 获取产品
		GetProduct(ctx context.Context, in *GetProductReq, opts ...grpc.CallOption) (*ProductReply, error)
		//  获取产品列表
		GetProductList(ctx context.Context, in *GetProductListReq, opts ...grpc.CallOption) (*ProductListReply, error)
	}

	defaultProduct struct {
		cli zrpc.Client
	}
)

func NewProduct(cli zrpc.Client) Product {
	return &defaultProduct{
		cli: cli,
	}
}

//  获取轮播图
func (m *defaultProduct) GetBanner(ctx context.Context, in *GetBannerReq, opts ...grpc.CallOption) (*BannerReply, error) {
	client := product.NewProductClient(m.cli.Conn())
	return client.GetBanner(ctx, in, opts...)
}

// 获取产品
func (m *defaultProduct) GetProduct(ctx context.Context, in *GetProductReq, opts ...grpc.CallOption) (*ProductReply, error) {
	client := product.NewProductClient(m.cli.Conn())
	return client.GetProduct(ctx, in, opts...)
}

//  获取产品列表
func (m *defaultProduct) GetProductList(ctx context.Context, in *GetProductListReq, opts ...grpc.CallOption) (*ProductListReply, error) {
	client := product.NewProductClient(m.cli.Conn())
	return client.GetProductList(ctx, in, opts...)
}
