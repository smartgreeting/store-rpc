// Code generated by goctl. DO NOT EDIT!
// Source: seckill.proto

package seckillclient

import (
	"context"

	"github.com/smartgreeting/store-rpc/seckill/seckill"

	"github.com/tal-tech/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	GetSeckillHomeListReply = seckill.GetSeckillHomeListReply
	GetSeckillHomeReply     = seckill.GetSeckillHomeReply
	GetSeckillHomeReq       = seckill.GetSeckillHomeReq
	GetSeckillListReply     = seckill.GetSeckillListReply
	GetSeckillReply         = seckill.GetSeckillReply
	GetSeckillReq           = seckill.GetSeckillReq

	Seckill interface {
		//  获取首页秒杀列表
		GetSeckillHomeList(ctx context.Context, in *GetSeckillHomeReq, opts ...grpc.CallOption) (*GetSeckillHomeListReply, error)
		//  获取秒杀列表
		GetSeckillList(ctx context.Context, in *GetSeckillReq, opts ...grpc.CallOption) (*GetSeckillListReply, error)
	}

	defaultSeckill struct {
		cli zrpc.Client
	}
)

func NewSeckill(cli zrpc.Client) Seckill {
	return &defaultSeckill{
		cli: cli,
	}
}

//  获取首页秒杀列表
func (m *defaultSeckill) GetSeckillHomeList(ctx context.Context, in *GetSeckillHomeReq, opts ...grpc.CallOption) (*GetSeckillHomeListReply, error) {
	client := seckill.NewSeckillClient(m.cli.Conn())
	return client.GetSeckillHomeList(ctx, in, opts...)
}

//  获取秒杀列表
func (m *defaultSeckill) GetSeckillList(ctx context.Context, in *GetSeckillReq, opts ...grpc.CallOption) (*GetSeckillListReply, error) {
	client := seckill.NewSeckillClient(m.cli.Conn())
	return client.GetSeckillList(ctx, in, opts...)
}
